from pymongo import MongoClient
import time
from statistics import mean


#connect to mongo and create connection to PIP database
client = MongoClient('mongodb+srv://cowen:compproject@cluster0.1qgln.mongodb.net/Cluster0?retryWrites=true&w=majority')
db = client.rooms
count = 0



iteration_count = 0


temp = [0, 0, 0, 0, 0, 0, 0]
humidity = [0, 0, 0, 0, 0, 0, 0]
light = [0, 0, 0, 0, 0, 0, 0]

avgTempArr = [0, 0, 0, 0, 0, 0, 0]
avgHumArr = [0, 0, 0, 0, 0, 0, 0]
avgLightArr = [0, 0, 0, 0, 0, 0, 0]


while True:
    
    #Rounding the average arrays to 2 decimal points
    round_avgTempArr= [round(num, 2) for num in avgTempArr]
    round_avgHumArr= [round(num, 2) for num in avgHumArr]
    round_avgLightArr= [round(num, 2) for num in avgLightArr]
    
    avgTempArr = round_avgTempArr
    avgHumArr = round_avgHumArr
    avgLightArr = round_avgLightArr

    #Changing string arrays to number arrays
    num_temp = list(map(float, temp))
    num_hum = list(map(float, humidity))
    num_light = list(map(float, light))
    
    #Finding average of each data array
    avgTemp = mean(num_temp)
    avgHum = mean(num_hum)
    avgLight = mean(num_light)
    
    #Getting data from data base
    result = db.PIPdata.find_one()     
    print(result)
    
    
    temp.pop(0)
    humidity.pop(0)
    light.pop(0) 
    avgTempArr.pop(0)
    avgHumArr.pop(0)
    avgLightArr.pop(0)
    
    temp.append(result['Temperature'])
    humidity.append(result['Humidity'])
    light.append(result['Light'])
    avgTempArr.append(avgTemp)
    avgHumArr.append(avgHum)
    avgLightArr.append(avgLight)
    
    
    print(temp)
    print(light)
    print(humidity)

    with open('sep_charts.html', 'w') as f:
        f.write(
                """
  <style>
  .container{{
    display:flex;
  }}
  .label{{
    flex:1;
    vertical-align: middle;
    text-align: center;
  }}
  .x{{
    flex:3;
    text-align: center;    
    margin: 10px;
  }}
  .y{{
    flex:3;
    text-align: center;    
    margin-top: 10px;
    margin-bottom:10px;
}}
  .z{{
    flex:3;
    text-align: center;    
    margin:10px;
  }}
  h1{{
    text-align: center;
  }} 
      #alert {{
      opacity: 0;
      padding: 20px;
      background-color: #f44336; /* Red */
      color: white;
      margin-bottom: 15px;
      transition: 0.6;
    }}
    
   </style>
 
  <h1> Dynamic Data Monitoring </h1>
  <div id="labelAccel" class="label">
    
  <h2>Alert Messages</h2>


    <div id="alert">
        <strong>Danger!</strong> Container breached.
    </div>


      <h2> Raw Data </h2>
    <div class="container">
    
    <div class="x">     
        <canvas id="temp"></canvas>
         </div>
    <div class="y">
        <canvas id="hum" ></canvas>
          </div>
    <div class="z">
        <canvas id="light" ></canvas>
          </div>        
    </div>
    
    <h2> Average Data </h2>
    
    <div class="container">
    <div class="x"> 
      <canvas id="avgTemp"></canvas>
    </div>
    <div class="y"> 
      <canvas id="avgHumid"></canvas>
    </div>
    <div class="z"> 
      <canvas id="avgLight"></canvas>
    </div>
  </div>
 
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0"></script>
    <script>    
    
    //Collecting Data
    var tempData = [{tempOne}, {tempTwo}, {tempThree}, {tempFour}, {tempFive}, {tempSix}, {tempSeven}];
    var humData = [{humOne}, {humTwo}, {humThree}, {humFour}, {humFive}, {humSix}, {humSeven}];
    var lightData = [{lightOne}, {lightTwo}, {lightThree}, {lightFour}, {lightFive}, {lightSix}, {lightSeven}];
    var avgTempData = [{avgTemp1},{avgTemp2},{avgTemp3},{avgTemp4},{avgTemp5},{avgTemp6},{avgTemp7}];
    var avgHumData = [{avgHum1},{avgHum2},{avgHum3},{avgHum4},{avgHum5},{avgHum6},{avgHum7}];
    var avgLightData = [{avgLight1},{avgLight2},{avgLight3},{avgLight4},{avgLight5},{avgLight6},{avgLight7}];
    
    
    //////////////////////////////LINE CHARTS//////////////////////////////////////////
    
    var ctx = document.getElementById('temp').getContext('2d');
    var tempChart = new Chart(ctx, {{
        // The type of chart we want to create
        type: 'line',

        // The data for our dataset
        data: {{
            labels: ['t1' , 't2', 't3', 't4', 't5', 't6', 't7'],
            datasets: [{{
                label: 'Temperature',
                backgroundColor: 'rgb(236, 219, 83)',
                fill: false,
                borderColor: 'rgb(236, 219, 83)',
                data: tempData
            }}
            ]
        }},
        // Configuration options go here
        options: {{       
             responsive: true, 
            maintainAspectRatio: false,
            animation: {{
                duration: 0
            }}
        }}
    }});    
  
  
    var cty = document.getElementById('hum').getContext('2d');
    var humidChart = new Chart(cty, {{
        // The type of chart we want to create
        type: 'line',

        // The data for our dataset
        data: {{
            labels: ['t1', 't2', 't3', 't4', 't5', 't6', 't7'],
            datasets: [{{
                label: 'Humidity',
                backgroundColor: 'rgb(227, 65, 50)',
                fill: false,
                borderColor: 'rgb(227, 65, 50)',
                data: humData
            }}
            ]
        }},

        // Configuration options go here
        options: {{
             responsive: true, 
            maintainAspectRatio: false,
            animation: {{
                duration: 0
            }}
        }}
    }});
    
    var ctz = document.getElementById('light').getContext('2d');
    var lightChart = new Chart(ctz, {{
        // The type of chart we want to create
        type: 'line',

        // The data for our dataset
        data: {{
            labels: ['t1', 't2', 't3', 't4', 't5', 't6', 't7'],
            datasets: [{{
                label: 'Light',
                backgroundColor: 'rgb(108, 60, 220)',
                fill: false,
                borderColor: 'rgb(108, 60, 220)',
                data: lightData
            }}
            ]
        }},

        // Configuration options go here
        options: {{
             responsive: true, 
            maintainAspectRatio: false,
            animation: {{
                duration: 0
            }}
        }}
    }});


    //////////////////////////////BAR CHARTS//////////////////////////////////////////
    var barCtx = document.getElementById('avgTemp').getContext('2d');
    var barChart = new Chart(barCtx, {{
        // The type of chart we want to create
        type: 'bar',
        // The data for our dataset
        data: {{
            labels: ['t1', 't2', 't3', 't4', 't5', 't6', 't7'],
            datasets: [{{
                label: 'Temperature',
                backgroundColor: 'rgb(236, 219, 83)',
                fill: false,
                borderColor: 'rgb(236, 219, 83)',
                data: avgTempData
            }}
            ]
        }},
        // Configuration options go here
        options: {{     
             responsive: true, 
            maintainAspectRatio: false,
            animation: {{
                duration: 0
            }}
        }}
    }});   
    
    var barCty = document.getElementById('avgHumid').getContext('2d');
    var barChart = new Chart(barCty, {{
        // The type of chart we want to create
        type: 'bar',
        // The data for our dataset
        data: {{
            labels: ['t1', 't2', 't3', 't4', 't5', 't6', 't7'],
            datasets: [{{
                label: 'Humidity',
                backgroundColor: 'rgb(227, 65, 50)',
                fill: false,
                borderColor: 'rgb(227, 65, 50)',
                data: avgHumData
            }}
            ]
        }},
        // Configuration options go here
        options: {{   
             responsive: true, 
            maintainAspectRatio: false,
            animation: {{
                duration: 0
            }}
        }}
    }});   


    var barCtz = document.getElementById('avgLight').getContext('2d');
    var barChart = new Chart(barCtz, {{
        // The type of chart we want to create
        type: 'bar',
        // The data for our dataset
        data: {{
            labels: ['t1', 't2', 't3', 't4', 't5', 't6', 't7'],
            datasets: [{{
                label: 'Light',
                backgroundColor: 'rgb(108, 60, 220)',
                fill: false,
                borderColor: 'rgb(108, 60, 220)',
                data: avgLightData
            }}
            ]
        }},
        // Configuration options go here
        options: {{  
             responsive: true, 
            maintainAspectRatio: false,
            animation: {{
                duration: 0
            }}
        }}
    }});       
    
     //////////////////////////////CONTAINER OPEN ALERT/////////////////////////////////
    function con_Open(data){{
            if (data[0]&&data[1]&&data[2]&&data[3]&&data[4]&&data[5]&&data[6])
                {{
                    document.getElementById("alert").style.opacity="1";
                  }}
              else
                document.getElementById("alert").style.opacity="0";
        }}
    con_Open(lightData);
    
        ///// NOT USING ////
    const getAvg = arr => {{
    const sum = arr.reduce((total, currentValue) => total + currentValue);
    return sum/arr.length;
    barChart.data.datasets[0]
     }}
    var getAvgTemp = [getAvg(tempData)];
    var getAvgHum = [getAvg(humData)];
    var getAvgLight = [getAvg(lightData)];
    
    window.setTimeout(function () {{
    window.location.reload();
    }},1000);

    </script>
  
                """.format(avgTemp1 = avgTempArr[0], avgTemp2=avgTempArr[1], avgTemp3=avgTempArr[2], avgTemp4=avgTempArr[3], avgTemp5=avgTempArr[4], avgTemp6=avgTempArr[5], avgTemp7=avgTempArr[6],
                            avgHum1 = avgHumArr[0], avgHum2=avgHumArr[1], avgHum3=avgHumArr[2], avgHum4=avgHumArr[3], avgHum5=avgHumArr[4], avgHum6=avgHumArr[5], avgHum7=avgHumArr[6],
                            avgLight1 = avgLightArr[0], avgLight2=avgLightArr[1], avgLight3=avgLightArr[2], avgLight4=avgLightArr[3], avgLight5=avgLightArr[4], avgLight6=avgLightArr[5], avgLight7=avgLightArr[6],
                            tempOne=temp[0], tempTwo=temp[1], tempThree=temp[2], tempFour=temp[3], tempFive=temp[4], tempSix=temp[5], tempSeven=temp[6],
                            humOne=humidity[0], humTwo=humidity[1], humThree=humidity[2], humFour=humidity[3], humFive=humidity[4], humSix=humidity[5], humSeven=humidity[6],
                            lightOne=light[0], lightTwo=light[1], lightThree=light[2], lightFour=light[3], lightFive=light[4], lightSix=light[5], lightSeven=light[6])
            )

    f.close()

   

    time.sleep(1)


